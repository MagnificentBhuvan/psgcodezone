{"_id":{"$oid":"5b8013e27d2d79300cd6f838"},"q_name":"Pangrams","q_desc":"Roy wanted to increase his typing speed for programming contests. His friend suggested that he type the sentence \"The quick brown fox jumps over the lazy dog\" repeatedly. This sentence is known as a pangram because it contains every letter of the alphabet.","q_const":"0\u003c|s|\u003c=10000_Each character of s,s[i]£{a-z, A-Z,space} ","q_inp":"We promptly judged antique ivory buckles for the next prize","q_oup":"pangram"}
{"_id":{"$oid":"5b80236e4912bd3260ce89a6"},"q_name":"Birthday Choclate","q_desc":"Consider the chocolate bar as an array of squares,She wants to find segments summing to Ron's birth day, with a length equalling his birth month.In this case, there are two segments meeting her criteria:  and Complete the birthday function in the editor below. It should return an integer denoting the number of ways Lily can divide the chocolate bar birthday has the following parameter(s):s: an array of integers, the numbers on each of the squares of chocolated: an integer, Ron's birth daym: an integer, Ron's birth month","q_const":"1\u003c=n\u003c=100 1\u003c=s[i]\u003c=5,where(0\u003c=i\u003c=n) 1\u003c=d\u003c=31 1\u003c=m\u003c=12","q_inp":"5\r\n1 2 1 3 2\r\n3 2\u0009","q_oup":"2"}
{"_id":{"$oid":"5b83f079ef11ba1124cdda83"},"q_name":"Century From year","q_desc":"Given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc.For year = 1905, the output should be centuryFromYear(year) = 20; For year = 1700, the output should be centuryFromYear(year) = 17","q_const":"[execution time limit] 0.5 seconds (cpp)  [input] integer year.Guaranteed constraints: 1 ≤ year ≤ 2005","q_inp":"A positive integer, designating the year.","q_oup":"The number of the century the year is in"}
{"_id":{"$oid":"5b83f15cef11ba1124cdda84"},"q_name":"Check Palindrome","q_desc":"For inputString = \"aabaa\", the output should be checkPalindrome(inputString) = true; For inputString = \"abac\", the output should be checkPalindrome(inputString) = false; For inputString = \"a\", the output should be checkPalindrome(inputString) = true.","q_const":"[execution time limit] 3 seconds (java) Guaranteed constraints: 1 ≤ inputString.length ≤ 105.","q_inp":"[input] string inputString  A non-empty string consisting of lowercase characters.","q_oup":"[output] boolean true if inputString is a palindrome, false otherwise."}
{"_id":{"$oid":"5b83f220ef11ba1124cdda85"},"q_name":"Adjacent Elements Product","q_desc":"Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.For inputArray = [3, 6, -2, -5, 7, 3], the output should be adjacentElementsProduct(inputArray) = 21.  7 and 3 produce the largest product.","q_const":"[execution time limit] 3 seconds (java) An array of integers containing at least two elements. Guaranteed constraints: 2 ≤ inputArray.length ≤ 10, -1000 ≤ inputArray[i] ≤ 1000.","q_inp":"[input] array.integer inputArray","q_oup":"[output] integer  The largest product of adjacent elements."}
{"_id":{"$oid":"5b83f2ccef11ba1124cdda86"},"q_name":"Largest Number","q_desc":"Given an integer n, return the largest number that contains exactly n digits.  Example  For n = 2, the output should be largestNumber(n) = 99.","q_const":"[execution time limit] 3 seconds (java) Guaranteed constraints: 1 ≤ n ≤ 9.","q_inp":"[input] integer n","q_oup":"[output] integer  The largest integer of length n."}
